{"version":3,"file":"index.js","sources":["../webpack://@testkit-labs/action/webpack/runtime/compat","../webpack://@testkit-labs/action/./index.js"],"sourcesContent":["\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\\/\\/\\/\\w:/) ? 1 : 0, -1) + \"/\";","const core = require(\"@actions/core\");\nconst http = require(\"@actions/http-client\");\nconst auth = require(\"@actions/http-client/lib/auth\");\n\nconst BASE_URL = \"https://app.testkit.app/api/v1\";\nconst INITIAL_DELAY = 10000;\nconst POLL_INTERVAL = 3000;\nconst POLL_LIMIT = 1200;\n\nlet client;\nlet pollCount = 0;\nlet currentGroupRun;\n\nasync function run() {\n  try {\n    const apiKey = core.getInput(\"api_key\");\n    core.setSecret(apiKey);\n\n    const authBearer = new auth.BearerCredentialHandler(apiKey);\n    client = new http.HttpClient(\"testkit-action\", [authBearer]);\n\n    await authenticate();\n    await runTestSuites();\n  } catch (error) {\n    core.setFailed(error.message);\n  }\n}\n\nasync function poll() {\n  if (pollCount > POLL_LIMIT) {\n    core.setFailed(\n      \"Polling limit reached. Tests are running for more than 60 minutes.\"\n    );\n    return;\n  }\n\n  const response = await client.getJson(\n    `${BASE_URL}/run/${currentGroupRun.id}`\n  );\n\n  if (response.statusCode !== 200) {\n    throw new Error(\"Failed to poll for test results\");\n  }\n\n  const { finished, id, runs } = response.result;\n\n  if (finished) {\n    logSummary(runs);\n    const didFail = runs.some((run) => run.status === \"failed\");\n    didFail\n      ? core.setFailed(\"Some test suites failed\")\n      : core.info(\"Test suite passed\");\n    return;\n  }\n\n  runs.forEach((run) => {\n    const { id, status, name } = run;\n    const previousRunState = currentGroupRun.runs.find((r) => r.id === id);\n    if (\n      status !== previousRunState.status &&\n      [\"failed\", \"passed\"].includes(status)\n    ) {\n      core.info(`Test suite ${name} ${status ? status : \"pending\"}`);\n    }\n  });\n\n  currentGroupRun = { finished, id, runs };\n\n  pollCount++;\n  setTimeout(poll, POLL_INTERVAL);\n}\n\nasync function authenticate() {\n  core.info(\"Authenticating with Testkit...\");\n  const response = await client.postJson(`${BASE_URL}/ci_auth`);\n\n  if (response.statusCode !== 200) {\n    throw new Error(\n      `Testkit authentication failed: ${response.message.statusMessage}`\n    );\n  }\n  const { name } = response.result;\n  core.info(`Authenticated as Organization: ${name}`);\n}\n\nasync function runTestSuites() {\n  core.info(\"Running tests...\");\n  const testResponse = await client.postJson(`${BASE_URL}/run`);\n  if (testResponse.statusCode !== 200) {\n    throw new Error(\n      `Testkit test run failed: ${testResponse.message.statusMessage}`\n    );\n  }\n\n  const { id, runs } = testResponse.result;\n  currentGroupRun = { finished: false, id, runs };\n  core.info(`Running ${runs.length} test suites...`);\n  setTimeout(poll, INITIAL_DELAY);\n}\n\nfunction logSummary(runs) {\n  core.info(\"\\n\\n===============================================\");\n  core.info(\"=============== Testkit Summary ===============\");\n  core.info(\"===============================================\");\n  runs.forEach((run) => {\n    const { id, status, name } = run;\n    core.info(\n      `${icon(\n        status\n      )} ${name} result: https://app.testkit.app/test_suite_runs/${id}`\n    );\n  });\n}\n\nfunction icon(status) {\n  return status === \"failed\"\n    ? `\\u001B[31m✗\\u001B[39m`\n    : `\\u001B[32m✔\\u001B[39m`;\n}\n\nrun();\n"],"mappingssourceRoot":""}